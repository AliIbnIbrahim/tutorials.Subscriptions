{
	"info": {
		"_postman_id": "b240d096-0af8-44c3-9a5e-22fee62f49e7",
		"name": "FIWARE Subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Subscription Actions",
			"description": "A subscription notifies another service by making a POST request to a specified URL when the conditions of the subscription have been met.\n\nThe **CRUD** operations for subscriptions map on to the expected HTTP verbs under the `/v2/subscriptions/` endpoint.\n\n* **Create** - HTTP POST\n* **Read** - HTTP GET\n* **Update** - HTTP PATCH\n* **Delete** - HTTP DELETE\n\nThe `<subscription-id>` is auto generated when the subscription is created and returned in Header\nof the POST response to be used by the other operation thereafter.\n",
			"item": [
				{
					"name": "Create a Subscription (Product)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of all product price changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\", \"type\": \"Product\"\n      }\n    ],\n     \"condition\": {\n      \"attrs\": [ \"price\" ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://context-provider:3000/subscription/price-change\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "This example creates a new subscription. The subscription will fire an asynchronous notification to a URL\nwhenever the context is changed and the conditions of the subscription - *Any Changes to Product prices* - are met.\n\nNew subscriptions can be added by making a POST request to the `/v2/subscriptions/` endpoint.\n\nThe `subject` section of the request states that the subscription will be fired whenever the `price` attribute of\nany **Product** entity is altered.\n\nThe `notification` section of the body states that a POST request containing all affected entities will\nbe sent to the `http://context-provider:3000/subscription/price-change` endpoint.\n\n\nSubscription ids are auto-generated when the subscription is created and returned in the header of the response.\n\n---\nSubsequent requests will create duplicate subscriptions"
					},
					"response": []
				},
				{
					"name": "Delete a Subscription",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:1026/v2/subscriptions/5ae079b86e4f353c5163c939",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "1026",
							"path": [
								"v2",
								"subscriptions",
								"5ae079b86e4f353c5163c939"
							]
						},
						"description": "This example deletes the Subscription with `id=5ae079b86e4f353c5163c939` from the context.\n\nSubscriptions can be deleted by making a DELETE request to the `/v2/subscriptions/<subscription-id>` endpoint.\n\nThe Subscription id had been auto-generated when the subscription was created.\n\n---\nSubsequent requests using the same `id` will result in an error response since the subscription no longer exists"
					},
					"response": []
				},
				{
					"name": "Amend an Existing Subscription",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"active\",\n    \"notification\": {\n        \"http\": {\n            \"url\": \"http://context-provider:3000/notify/price-change\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{host}}:1026/v2/subscriptions/5ae07c7e6e4f353c5163c93e",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "1026",
							"path": [
								"v2",
								"subscriptions",
								"5ae07c7e6e4f353c5163c93e"
							]
						},
						"description": "This example amends an existing subscription with the id `5ae07c7e6e4f353c5163c93e` and updates the `notification` URL.\n\nSubscriptions can be updated making a PATCH request to the `/v2/subscriptions/<subscription-id>` endpoint.\n\nThe Subscription id had been auto-generated when the subscription was created."
					},
					"response": []
				},
				{
					"name": "List all Subscriptions",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": {\n        \"entities\": [{\n          \"id\": \"\"  \n        }],\n        \"condition\": {\n            \"attrs\": [\"capacity\"]\n        }\n    },\n    \"notification\": {\n        \"http\": {\n            \"url\": \"http://localhost:8000\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "This example lists all subscriptions by making a GET request to the `/v2/subscriptions/` endpoint.\n\nThe `notification` section of each subscription will also include the last time the conditios of the subscription\nwere met, and whether associated the POST action was successful."
					},
					"response": []
				},
				{
					"name": "Read the detail of a Subscription",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": {\n        \"entities\": [{\n          \"id\": \"\"  \n        }],\n        \"condition\": {\n            \"attrs\": [\"capacity\"]\n        }\n    },\n    \"notification\": {\n        \"http\": {\n            \"url\": \"http://localhost:8000\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/5aead3361587e1918de90aba",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								"5aead3361587e1918de90aba"
							]
						},
						"description": "This example obtains the full details of a subscription with a given id.\n\nThe response includes additional details in the `notification` section showing \nthe last time the conditions of the subscription were met, and whether associated the POST \naction was successful.\n\nSubscription details can be read by making a GET request to the `/v2/subscriptions/<subscription-id>` endpoint.\n\nThe Subscription id had been auto-generated when the subscription was created."
					},
					"response": []
				},
				{
					"name": "Create a Subscription ( Store 1) - Low Stock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low stock in Store 001\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\",\n        \"type\": \"InventoryItem\"\n      }\n    ],\n     \"condition\": {\n      \"attrs\": [\n        \"shelfCount\"\n      ],\n      \"expression\": {\n        \"q\": \"shelfCount<10;refStore==urn:ngsi-ld:Store:001\"\n      }\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://context-provider:3000/subscription/low-stock-store001\"\n    },\n    \"attrsFormat\" : \"keyValues\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions"
							]
						},
						"description": "This example creates a new subscription which will only fire under specific conditions - \n*low stock for Store 001* - and will only return key-value pairs\nfor the entity affected. The subscription will fire an asynchronous notification to a URL\nwhenever the context is changed and only when all of the conditions of the subscription are met.\n\nNew subscriptions can be added by making a POST request to the `/v2/subscriptions/` endpoint.\n\n* The `subject` section of the request states that the subscription will be checked whenever the `shelfCount` attribute of\n  any **InventoryItem** entity is altered.\n* The `expression` section of the request states that the subscription will only fire if the `shelfCount` is below 10 items\n  and the **InventoryItem** entity belongs to `Store:001`\n* The `notification` section of the body states that a POST request containing all affected entities will\n  be sent to the `http://context-provider:3000/subscription/low-stock-store001` endpoint. . The `attrsFormat` attribute informs\n  the context broker to only send key-value pairs\n\n---\nSubsequent requests will create duplicate subscriptions"
					},
					"response": []
				},
				{
					"name": "Create a Subscription ( Store 2) - Low Stock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low stock in Store 002\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\",\n        \"type\": \"InventoryItem\"\n      }\n    ],\n     \"condition\": {\n      \"attrs\": [\n        \"shelfCount\"\n      ],\n      \"expression\": {\n        \"q\": \"shelfCount<10;refStore==urn:ngsi-ld:Store:002\"\n      }\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://context-provider:3000/subscription/low-stock-store002\"\n    },\n    \"attrsFormat\" : \"keyValues\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions"
							]
						},
						"description": "This example creates a new subscription which will only fire under specific conditions - *low stock for Store 002* -  and will only return \nkey-value pairs for the entity affected. The subscription will fire an asynchronous notification to a URL\nwhenever the context is changed and only when all of the conditions of the subscription are met.\n\nNew subscriptions can be added by making a POST request to the `/v2/subscriptions/` endpoint.\n\n* The `subject` section of the request states that the subscription will be checked whenever the `shelfCount` attribute of\n  any **InventoryItem** entity is altered.\n* The `expression` section of the request states that the subscription will only fire if the `shelfCount` is below 10 items\n  and the **InventoryItem** entity belongs to `Store:002`\n* The `notification` section of the body states that a POST request containing all affected entities will\n  be sent to the `http://context-provider:3000/subscription/low-stock-store002` endpoint. The `attrsFormat` attribute informs\n  the context broker to only send key-value pairs\n\n---\nSubsequent requests will create duplicate subscriptions"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d605e1da-1bc2-4e19-9f42-2a9efe1ec34f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3ed79691-91f2-49f5-8dd0-7af009166ae9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Amending Context Data",
			"description": "The tutorial assumes that users will buy the products from the web app,\nhowever Postman commands are also provided for convenience.\n\n* `http://localhost:3000/app/monitor`\n* `http://localhost:3000/app/store/urn:ngsi-ld:Store:002`",
			"item": [
				{
					"name": "Amend the price of a product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "89"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/attrs/price/value",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								"attrs",
								"price",
								"value"
							]
						},
						"description": "This example reduces the price of a can of  Beer to 0.89 €.\n\nIt updates the value of the `price` attribute of the Entity with `id=urn:ngsi-ld:Product:001`\n\nExisiting attribute values can be altered by making a PUT request to the `/v2/entities/<entity>/attrs/<attribute>/value` endpoint."
					},
					"response": []
				},
				{
					"name": "Reduce the Shelf count",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "5"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:InventoryItem:005/attrs/shelfCount/value",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:InventoryItem:005",
								"attrs",
								"shelfCount",
								"value"
							]
						},
						"description": "This example reduces the number of beer cans left on sale in **Checkpoint Markt**\n(`store:002`) down to 5. If a subscription has been set up, a warning will be sent to the warehouse. \n\nThe value of the `shelfCount` attribute of the Entity with `id=urn:ngsi-ld:InventoryItem:005`can be \naltered by making a PUT request to the `/v2/entities/<entity>/attrs/<attribute>/value` endpoint."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c43b57f2-84cc-4d57-8c6d-5b4260399699",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc26f7d9-301c-48e2-891f-3c336c18fe96",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a25c858c-0646-4514-85e8-f6f9aeafc5be",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f81ca278-51ac-41c1-a4e6-66baed8434f2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c4945d3c-de95-4335-973a-dbcda5a5a32b",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		}
	]
}